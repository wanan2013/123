DBA 数据库管理员 岗位

DB1基础  5天 （背命令和操作步骤）

db2进阶  5天 （背操作步骤和命令 理解服务的工作原理）

DB_NoSQL 5天 （背命令 服务的工作原理）
++++++++++++++++++++++++++++++++++++++++
DB1基础  5天

day01
搭建数据库服务器
在主机50上部署mysql数据库服务器 MYSQL ORACLE  DB2  SQL SERVER

装包  mysql-5.7.17.tar
tar -xvf mysql-5.7.17.tar
ls  *.rpm
yum -y  install  perl-JSON
rpm -Uvh mysql-community-*.rpm

修改配置文件(无需修改 按默认配置运行即可)
vim /etc/my.cnf

启动
systemctl  start mysqld
systemctl  enable mysqld
systemctl  status mysqld
ls  /var/lib/mysql/  查看初始化数据

查看服务运行状态
]# netstat -utnlp  | grep :3306 查看端口
]# ps -C mysqld                 查看进程


与数据库服务相关的信息？
主配置文件  日志文件  socket文件 PID号文件 
数据目录的位置  进程所有者和组   数据目录所有者和组


客户端连接数据库服务存储数据
*默认只允许数据服务器自己访问自己。
]# grep password /var/log/mysqld.log
]# mysql -hlocalhost -uroot -p'sttLT6(4hk=#'

mysql> alter user root@"localhost" identified  by "123qqq...A";

mysql> show databases;
mysql>  quit或exit

]# mysql -hlocalhost -uroot -p123qqq...A
mysql> show databases;

SQL命令 的使用规则（结构化查询语言）


修改数据库服务密码策略?
命令行
mysql> show variables like "%password%";
mysql> set global validate_password_policy=0;
mysql> set global validate_password_length=6;
mysql> alter user root@"localhost" identified by "123456";
mysql> quit
]# mysql -hlocalhost -uroot -p123456
mysql> show databases;

永久设置
vim /etc/my.cnf
[mysqld]
validate_password_policy=0
validate_password_length=6
:wq
systemctl  restart  mysqld
]# mysql -hlocalhost -uroot -p123456
mysql> show variables like "%password%";


数据库服务的基本使用：
客户端把数据存储到数据库服务器上的步骤：
1 客户端连接数据库服务器
2 创建数据库（文件夹）
3 创建表（文件） 创建 查看 删除
4 存储数据 （select insert  update delete）
5 断开连接

连接数据库命令
mysql  -hlocalhost -uroot  -p123456

数据库管理命令
创建 查看当前所在的库 查看  切换库 删除  


表管理命令
mysql> create database teadb;
mysql> create table teadb.stuinfo(
    -> name char(20),
    -> age int,
    -> homeaddr  char(50)
    -> );
mysql> show  tables;


mysql> insert  into  teadb.stuinfo 
values
("bob",19,"shenzhen"),
("tom",21,"guangzhou");

mysql> select  *  from teadb.stuinfo;

修改所有表记录
mysql> update teadb.stuinfo set age=35;

修改符合条件的表记录
update teadb.stuinfo set age=18 where name="bob";

删除符合条件的表记录
mysql> delete from  teadb.stuinfo where name="bob";
mysql> delete from  teadb.stuinfo; 删除所有表记录

mysql> desc teadb.stuinfo; 查看表结构
mysql> select  *  from  stuinfo; 查看表记录
mysql> drop tables teadb.stuinfo; 删除表
mysql> show tables; 查看已有的表

use teadb;
mysql> create  table 
学生表(
姓名 char(20),性别 char(6)
)
DEFAULT CHARSET=utf8;

+++++++++++++++++++++++++++
MySQL数据类型

mysql> create table  t3(
    -> age tinyint  unsigned ,
    -> pay float(7,2)
    -> );
Query OK, 0 rows affected (0.15 sec)

mysql> insert into  t3 values(318,38000.88);
ERROR 1264 (22003): Out of range value for column 'age' at row 1
mysql> 
mysql> insert into  t3 values(18,38000.88);
Query OK, 1 row affected (0.03 sec)

mysql> select  * from t3;
+------+----------+
| age  | pay      |
+------+----------+
|   18 | 38000.88 |
+------+----------+
1 row in set (0.00 sec)

mysql> 


mysql> create table  t4( name char(4), homedir  varchar(6) );
mysql> desc  t4;
insert into  t4 values("jack","usa");

mysql> insert into  t4 values("jack2","usaB");
ERROR 1406 (22001): Data too long for column 'name' at row 1
mysql> 

+++++++++++++++++++++++++++++++++
日期时间类型
mysql> create table  t5(
    -> name char(10),
    -> birthday  date,
    -> start  year,
    -> uptime time,
    -> party  datetime
    -> );
Query OK, 0 rows affected (0.19 sec)

赋值
mysql> insert into t5 
values("bob",20181120,1990,083000,20181224203018);


查看记录
mysql> select  * from  t5;
+------+------------+-------+----------+---------------------+
| name | birthday   | start | uptime   | party               |
+------+------------+-------+----------+---------------------+
| bob  | 2018-11-20 |  1990 | 08:30:00 | 2018-12-24 20:30:18 |
+------+------------+-------+----------+---------------------+
1 row in set (0.00 sec)

mysql> 

枚举类型
mysql> create table t6( 
name char(10), 
likes set("eat","sleep","game","film"), 多选
sex enum("boy","girl","no")  单选
);

赋值
mysql> insert into  t6 values("bob","eat,sleep","boy");
Query OK, 1 row affected (0.05 sec)

mysql> select  * from  t6;
+------+-----------+------+
| name | likes     | sex  |
+------+-----------+------+
| bob  | eat,sleep | boy  |
+------+-----------+------+
1 row in set (0.00 sec)
赋没有的值 报错
mysql> insert into  t6 values("tom","woman","man");
ERROR 1265 (01000): Data truncated for column 'likes' at row 1
mysql> 


desc  mysql.user;

在persondb数据里创建dogperson表存储前任信息

随堂命令在172.40.50.117的 此目录下 nsd1807/day01.txt


+++++++++++++++++++++++++++++++++++++++++++++++++++
使用时间函数给日期时间类型字段赋值
select now(); 日期时间
select year(now()); 年
select month(now());月
select day(now()); 日
select time(now());时间
select date(now());日期时间
select curtime(); 时间
select curdate();日期
use   teadb;
insert into t5 values("lucy",date(now()),year(19901008),curtime(),now());
select  * from  t5 where name="lucy";

datetime 与 timestamp 类型的区别。

mysql> create table t7 (
    -> meetting datetime,
    -> party timestamp
    -> );
Query OK, 0 rows affected (0.13 sec)

mysql> insert into t7 values(now(),now() );
mysql> insert into t7(meetting) values( now() );
mysql> insert into t7(party) values( 20181023223030 );

mysql> select  * from t7;
+---------------------+---------------------+
| meetting            | party               |
+---------------------+---------------------+
| 2018-10-16 09:25:23 | 2018-10-16 09:25:23 |
| 2018-10-16 09:27:06 | 2018-10-16 09:27:06 |
| NULL                | 2018-10-23 22:30:30 |
+---------------------+---------------------+

使用2为数字给year 类型的字段赋值
mysql> insert into t5(name,start)values("tom",50);
mysql> insert into t5(name,start)values("lucy",77);
MySQL > select  * from  t5;

数值类型的宽度是显示宽度
create table  t8 (
name char(3),
level  int（3） zerofill
);

insert into t8  values("tom",13);
insert into t8  values("jim", 29);
insert into t8  values("lee", 129);
insert into t8  values("bob", 1129);
select  * from t8;
    

练习到 09：56
+++++++++++++++++++++++++++++++++++++++++++
day02
字段约束条件：控制给字段赋值
mysql> create table  t9(
    -> name char(10)not  null,
    -> age  tinyint(2) default 19,
    -> likes set("eat","sleep","game","flim") 
       not null default "eat,sleep"
    -> );

mysql> insert into  t9(name)values("bob");

mysql> insert into  t9 values("tom",21,"game,flim");

name 字段不允许赋null值
mysql> insert into  t9 values(NULL,21,"game,flim");
ERROR 1048 (23000): Column 'name' cannot be null
 
加“”表示为普通字符 
mysql> insert into  t9 values("NULL",21,"game,flim");
Query OK, 1 row affected (0.03 sec)
+++++++++++++++++++++++++++++++
添加新字段
mysql> alter table  t4 add age int(2) default 19;
mysql> alter table  t4 add mail char(50) after name;
mysql> alter table  t4 add stu_num char(10) first;

修改字段类型 ，类型要与字段存储的数据匹配
mysql> alter table  t4 modify name varchar(3);
ERROR 1406 (22001): Data too long for column 'name' at row 1

mysql> alter table  t4 modify name varchar(15);
Query OK, 1 row affected (0.44 sec)

修改字段位置
mysql> alter table  t4  modify age int(2) default  19 
after name;

删除字段
mysql> alter table  t5 drop start;
mysql> select  * from t5;
mysql> desc  t5;

修改字段名alter table  t4 change stu_num stu_id char(10);

修改表名 alter table   t9 rename stuinfo;
++++++++++++++++++++++++++++++++
5000+

select 

insert update delete

索引  算法 Btree （二叉树）
stuinfo-----> /var/lib/mysql/数据库名/stuinfo.frm stuinfo.ibd
index
name


           1 - 10

      1-5          6-10
 1-2.5   2.6-5


mysql> show  index from t4;

建表是创建索引
create  table  t21(
name  char(10),
sex  enum("boy","girl"),
class char(7),
age  int(2),
index(name),
index(sex)
);
desc t21; 查看索引
show index  from  t21\G; 查看详细信息
drop  index  name  on  t21; 删除索引
desc  t21;
show index  from  t21\G;

create  index  name  on  t21(name); 在已有表里设置索引字段
desc  t21;
select  * from t21 where name="bob";

创建主键 格式1
mysql> create table t22(
    -> name char(10),
    -> stu_num char(9),
    -> primary key(stu_num)
    -> );
Query OK, 0 rows affected (0.43 sec)


创建主键 格式2
mysql> create table t23( 
name char(10) primary key, 
stu_num char(9) 
);
mysql> desc t22;
+---------+----------+------+-----+---------+-------+
| Field   | Type     | Null | Key | Default | Extra |
+---------+----------+------+-----+---------+-------+
| name    | char(10) | YES  |     | NULL    |       |
| stu_num | char(9)  | NO   | PRI | NULL    |       |
+---------+----------+------+-----+---------+-------+

mysql> insert into t22 values("bob","nsd180709");
mysql> insert into t22 values("bob","nsd180708");
mysql> select  * from  t22;

字段值不允许重复或赋null值
mysql> insert into t22 values("lucy","nsd180708");
ERROR 1062 (23000): Duplicate entry 'nsd180708' for key 'PRIMARY'

mysql> insert into t22 values("lucy",null);
ERROR 1048 (23000): Column 'stu_num' cannot be null


复合主键（表中多个字段一起做主键）
mysql> create table  t24(
    -> cip  char(15),
    -> sport smallint(2),
    -> status  enum("deny","allow"),
    -> primary key(cip,sport)
    -> );
Query OK, 0 rows affected (0.29 sec)

mysql> desc  t24;
+--------+----------------------+------+-----+---------+-------+
| Field  | Type                 | Null | Key | Default | Extra |
+--------+----------------------+------+-----+---------+-------+
| cip    | char(15)             | NO   | PRI | NULL    |       |
| sport  | smallint(2)          | NO   | PRI | NULL    |       |
| status | enum('deny','allow') | YES  |     | NULL    |       |
+--------+----------------------+------+-----+---------+-------+
3 rows in set (0.00 sec)
mysql> insert into t24 values("192.168.4.1",21,"deny");
Query OK, 1 row affected (0.04 sec)
mysql> insert into t24 values("192.168.4.1",21,"allow");
ERROR 1062 (23000): Duplicate entry '192.168.4.1-21' for key 'PRIMARY'
mysql> 
mysql> insert into t24 values("192.168.4.2",21,"allow");
Query OK, 1 row affected (0.10 sec)
mysql> insert into t24 values("192.168.4.2",23,"deny");
Query OK, 1 row affected (0.04 sec)

mysql> select  * from t24;
+-------------+-------+--------+
| cip         | sport | status |
+-------------+-------+--------+
| 192.168.4.1 |    21 | deny   |
| 192.168.4.2 |    21 | allow  |
| 192.168.4.2 |    23 | deny   |
+-------------+-------+--------+

删除主键
mysql> alter table t24 drop  primary key;
mysql> insert into t24 values("192.168.4.2",21,"deny");
mysql> insert into t24 values("192.168.4.2",21,"deny");

在已有表里创建复合主键
mysql> select  * from t24;
+-------------+-------+--------+
| cip         | sport | status |
+-------------+-------+--------+
| 192.168.4.1 |    21 | deny   |
| 192.168.4.2 |    21 | allow  |
| 192.168.4.2 |    23 | deny   |
| 192.168.4.2 |    21 | deny   |
| 192.168.4.2 |    21 | deny   |
+-------------+-------+--------+
5 rows in set (0.00 sec)

mysql> alter table  t24 add  primary key(cip,sport);
ERROR 1062 (23000): Duplicate entry '192.168.4.2-21' for key 'PRIMARY'

mysql> delete from  t24;

mysql> alter table  t24 add  primary key(cip,sport);

primary key 与 AUTO_INCREMENT 连用


mysql> create table t25(
    -> stu_id  int(2) primary key auto_increment,
    -> name char(5),
    -> age  tinyint(2) unsigned
    -> );

mysql> insert into t25(name,age)values("bob",19);

mysql> insert into t25(name,age)values("tom",29);

mysql> select  * from  t25;
+--------+------+------+
| stu_id | name | age  |
+--------+------+------+
|      1 | bob  |   19 |
|      2 | tom  |   29 |
+--------+------+------+

mysql> alter table stuinfo add  id int(2) zerofill primary key
    -> auto_increment first;

select   *  from   stuinfo;


有自增长设置时 删除主键的步骤
mysql> alter table  t25 modify stu_id int(2) not null ; 先删除自增长
mysql> alter table  t25 drop primary key; 再删除主键
++++++++++++++++++++++++++++++++++++++++++++++++++
外键
                员工信息表
		ygtab  user 姓名  yg_id
                      lucy         1
		      jack	   8	
	              tom          3
                 
工资表
gztab    gz_id 员工号外键   pay 工资
         1		       20000
         8                     26000
         3                     36000
      

mysql> create table ygtab(
    -> yg_id  int(2) primary key auto_increment,
    -> name char(10)
    -> )engine=innodb;
Query OK, 0 rows affected (0.36 sec)

mysql> insert into ygtab(name)values("bob");
Query OK, 1 row affected (0.04 sec)

mysql> insert into ygtab(name)values("tom");
Query OK, 1 row affected (0.04 sec)

mysql> select  * from ygtab;
+-------+------+
| yg_id | name |
+-------+------+
|     1 | bob  |
|     2 | tom  |
+-------+------+
2 rows in set (0.00 sec)

mysql> 
      
mysql> create  table gztab(
    -> gz_id  int(2),
    -> pay float(7,2),
    -> foreign key(gz_id) references ygtab(yg_id)
    -> on update cascade on delete cascade
    -> )engine=innodb;
Query OK, 0 rows affected (0.35 sec)

查看表是否有外键
mysql> show  create  table gztab;

 
mysql> insert into gztab values(1,28000);
Query OK, 1 row affected (0.04 sec)

mysql> insert into gztab values(2,38000);
Query OK, 1 row affected (0.11 sec)
  

mysql> insert into gztab values(3,30000);
ERROR 1452 (23000): Cannot add or update a 
child row: a foreign key constraint
 fails (`teadb`.`gztab`, CONSTRAINT `gztab_ibfk_1` 
FOREIGN KEY (`gz_id`) REFERENCES `ygtab` (`yg_id`) 
ON DELETE CASCADE ON UPDATE CASCADE)
mysql> 


mysql> update ygtab set yg_id=8 where yg_id=2;
Query OK, 1 row affected (0.03 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> select  * from ygtab;
+-------+------+
| yg_id | name |
+-------+------+
|     1 | bob  |
|     8 | tom  |
+-------+------+
2 rows in set (0.00 sec)

mysql> select  * from gztab;
+-------+----------+
| gz_id | pay      |
+-------+----------+
|     1 | 28000.00 |
|     8 | 38000.00 |
+-------+----------+
2 rows in set (0.00 sec)

mysql> delete from  ygtab where yg_id=8;
mysql> select  * from ygtab;
+-------+------+
| yg_id | name |
+-------+------+
|     1 | bob  |
+-------+------+
1 row in set (0.01 sec)

mysql> 
mysql> 
mysql> 
mysql> 
mysql> 
mysql> select  * from gztab;
+-------+----------+
| gz_id | pay      |
+-------+----------+
|     1 | 28000.00 |
+-------+----------+
1 row in set (0.00 sec)

mysql> delete  from  gztab;
mysql> alter table gztab add primary key (gz_id);


mysql> insert into gztab values(1,28000);
Query OK, 1 row affected (0.06 sec)

mysql> insert into gztab values(1,28000);
ERROR 1062 (23000): Duplicate entry '1' for key 'PRIMARY'

mysql> insert into gztab values(null,28000);
ERROR 1048 (23000): Column 'gz_id' cannot be null

mysql> select  * from gztab;


mysql> delete from ygtab;
Query OK, 1 row affected (0.04 sec)

mysql> select  * from ygtab;
Empty set (0.00 sec)

mysql> delete from gztab;
Query OK, 0 rows affected (0.00 sec)


mysql> drop table ygtab;
ERROR 1217 (23000): Cannot delete or update a parent row: a foreign key constraint fails
mysql>

mysql> alter table  gztab drop  
foreign key gztab_ibfk_1;

+++++++++++++++++++++++++
day03
一 MySQL存储引擎
MySQL服务的8个组件：
连接池  sql接口  分析器 优化器  查询缓存 
存储引擎 文件系统 管理工具

什么存储引擎？


mysql> show engines;


mysql> create table  t2 (name char(3))engine=myisam;

查询  读锁
select  * from  stuinfo;

pc2   ----> stuinfo
pc1  ----> stuinfo
     写锁
insert into stuinfo  values();
delete from stuinfo;
update  stuinfo set name="zhangsan";
事务日志文件

开户表（记录开户信息表）

存蓄表（用户存储金额） engine=innodb
金额
20000

+5w 
ICBC  ME     -------->  ABC  她

插卡 输入密码 正确并匹配 --->登录成功

转账  输入对方卡号
      输入金额   5w

+++++++++++++++++++++++++++++++
mysql> set autocommit=off;
Query OK, 0 rows affected (0.00 sec)

mysql> show variables like "autocommit";
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| autocommit    | OFF   |
+---------------+-------+
mysql> use db3;
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Database changed
mysql> create table  db3.t4(id int)engine=innodb;
Query OK, 0 rows affected (0.14 sec)

mysql> select  * from db3.t4;
Empty set (0.00 sec)

mysql> insert into db3.t4 values(666);
Query OK, 1 row affected (0.00 sec)

mysql> commit;
Query OK, 0 rows affected (0.02 sec)

mysql> select  * from db3.t4;
+------+
| id   |
+------+
|  666 |
+------+
1 row in set (0.00 sec)

mysql> 

mysql> delete from db3.t4;
Query OK, 1 row affected (0.00 sec)

mysql> select  * from db3.t4;
Empty set (0.00 sec)

mysql> rollback;
Query OK, 0 rows affected (0.08 sec)

mysql> select  * from db3.t4;
+------+
| id   |
+------+
|  666 |
+------+
1 row in set (0.00 sec)

mysql> commit;
Query OK, 0 rows affected (0.00 sec)

mysql> 


查询操作多的表适合使用myisam存储引擎 
可以节省系统资源.


写操作多的表适合使用innodb存储引擎
可以加大并发访问量。
++++++++++++++++++++++++
数据导入步骤
建库
create database db3;

建表
mysql> use db3;
Database changed
mysql> create table user(
    -> name char(50),
    -> password char(1),
    -> uid int(1),
    -> gid int(1),
    -> comment varchar(150),
    -> homedir varchar(100),
    -> shell char(30)
    -> );
Query OK, 0 rows affected (0.02 sec)

查看文件目录
mysql> show variables like "secure_file_priv";
+------------------+-----------------------+
| Variable_name    | Value                 |
+------------------+-----------------------+
| secure_file_priv | /var/lib/mysql-files/ |
+------------------+-----------------------+
1 row in set (0.00 sec)

mysql> 
拷贝文件
mysql> system cp /etc/passwd /var/lib/mysql-files/
mysql> system ls /var/lib/mysql-files/

数据导入
mysql> load data infile "/var/lib/mysql-files/passwd"
    -> into table db3.user
    -> fields terminated by ":"
    -> lines terminated by "\n";

查看导入的数据  select  * from  db3.user;

添加行号字段id
mysql> alter table db3.user
    -> add
    -> id int(2) primary key auto_increment first;

查看表记录
mysql> select  * from db3.user;
mysql> select  * from db3.user where id=1;

+++++++++++++++++++++++++++
修改导入数据文件的目录
[root@client50 ~]# vim /etc/my.cnf
secure_file_priv=/mydir
:wq

[root@client50 ~]# mkdir /mydir
[root@client50 ~]# chown mysql /mydir

[root@client50 ~]# ls -ld /mydir/
drwxr-xr-x. 2 mysql root 6  17 14:03 /mydir/

[root@client50 ~]# setenforce  0
[root@client50 ~]# systemctl  restart mysqld
[root@client50 ~]#
mysql>  show variables like "secure_file_priv";
+------------------+---------+
| Variable_name    | Value   |
+------------------+---------+
| secure_file_priv | /mydir/ |
+------------------+---------+

++++++++++++++++++++++++
数据导出
方法1
mysql> select  * from  teadb.t3 
into outfile "/mydir/a.txt";

方法2
mysql> select  * from  teadb.t3 
into outfile "/mydir/b.txt"
fields  terminated by "##" 
lines terminated by "!!!";

查看文件内容
]#cat /mydir/a.txt
]#cat /mydir/b.txt
++++++++++++++++++++++++++++++++
管理表记录 ：使用db3库下的user表

insert into 添加新记录
mysql> insert into user 
values 
(42,"bob","x",3003,3003,"test user","/home/bob","/shell/bash");


mysql> insert into user(name,uid,shell) 
values("tom",2008,"/bin/bash");
+++++++++++++++++++++++++
select 查询记录
显示表的所有记录
mysql> select  *  from  user;

查看每行指定列的值
mysql> select  name,shell,homedir  from  user;

加条件查询
mysql> select  name,shell,homedir  from  user
    -> where
    -> shell="/bin/bash";

给字段定义别名名称
mysql> select name username,uid  user_id from user;

+++++++++++++++++++++++++++++++++

update 修改记录（修改列的值）
mysql> update  user 
    -> set
    -> password="a",comment="student";

mysql> select password ,comment from user;

mysql> update user set  
password="x" where name="root";


delete from 删除记录
delete  from  user  where  name="bob";
delete from  db3.t4;

+++++++++++++++++++++++++++++++++
基本匹配 、高级匹配条件
适用于select/update/delete 操作

数值比较
mysql> select name,uid,gid from user where
    -> uid=gid;

mysql> select name,uid,gid from user where
    -> uid<=10;

mysql> select  *  from user where
    -> id=3;

字符比较
mysql> select * from  user where name="mysql";
mysql>select  name,shell from user  
where shell!="/bin/bash"



mysql> insert into  user(id ,name)
values(46,""),(44,"null"),(45,null);

select  id,name from  user where name="";

select  id,name from  user where name="null";

select  id,name from  user where name is null;

select  id,name from  user where name is not  null;

逻辑匹配（多个匹配条件）

or  某个条件成立即可

and 多个条件必须都同时成立

! 或not  取反 

select name,uid from 
user where name="root" and uid=3;

mysql> select name,uid from  user 
where name="root" or uid=3;

mysql> select name,uid from  user 
where name="root" or name="bin" and uid=3;

mysql> select name,uid from  user 
where (name="root" or name="bin") and uid=3;

mysql> select name,uid from  user 
where (name="root" or name="bin") and uid=1;

范围内匹配
mysql> select name from user
    -> where
    -> name in ("mysql","daemon","apache","adm");

mysql> select name from user 
    -> where
    -> uid in (10,20,30,40);
Empty set (0.00 sec)

mysql> select name，uid from user  
where uid not  in (10,20,30,40);

mysql> select id,name,shell from user
    -> where
    -> id between 10 and 20;
mysql> select distinct shell from user;
mysql> select distinct shell from user 
where uid<=1000;

模糊查询 like
mysql> select name from user
    -> where  name like '____';

mysql> select name from user 
where name like 'r__t';

mysql> select name from user where 
name like 'r%t';

mysql> select id,name from user where 
name like '%';  问查询结果里 会不会有 
select  id,name from user 
where  name="" or name is null;

mysql> select name from user where name 
like '__%__';

正则匹配

Insert into  user(name)
values("yaya1"),("9yaya"),("ya8ya"),("yay6a");
mysql> select name from user
    -> where
    -> name regexp '[0-9]';

mysql> select name,uid from user
    -> where
    -> uid regexp '...';

mysql> select name,uid from user
    -> where
    -> uid regexp '^...$';

mysql> select name,uid from user 
where name regexp '^a|^r';

mysql> select name from user
    -> where
    -> name regexp  '^j.*y$';
Empty set (0.00 sec)

mysql> select name from user where 
name regexp  '^a.*t$';

四则运算（字段类型要是数值类型）
+  -  *  /   %

mysql> select * from user where id<=10;

mysql> update user set uid=uid+1 where id<=10;
mysql> select * from user where id<=10;

alter table user add age tinyint(2) 
unsigned default 19 after name;
 
mysql>select name,age,2018-age start
from user where name="root";

聚集函数（对字段的值做统计）

mysql> select avg(uid) from 
user where shell!="/bin/bash";

mysql> select avg(uid) from user ;
mysql> select max(uid) from user;
mysql> select min(uid) from user;
mysql> select sum(age) from user;

mysql> select count(name) from user 
 where shell!="/bin/bash";

mysql> select count(id) from user; 

+++++++++++++++++++++++++
排序 order by

mysql> select name,uid from user 
where uid regexp '^...$' order by uid;

mysql> select name,uid from user 
where uid regexp '^...$' 
order by uid desc;
++++++++++++++++++++++++++++++
分组 group  by  字段名

mysql> select gid from user group  by  gid;

mysql> select gid from user  where id<=20 
group  by  gid;
++++++++++++++++++++++++++++++++++

过滤查询结果 having  条件

mysql> select id,name from user where name like '%'
    -> having id=45;
Empty set (0.00 sec)

mysql> select id,name from user where name like '%' 
    -> having name is null;
Empty set (0.00 sec)

mysql> select id,name from user where name like '%'  having name="";
+----+------+
| id | name |
+----+------+
| 46 |      |
+----+------+
1 row in set (0.00 sec)

mysql> 

mysql> select id,name from user where name like '%'  having name="";
+----+------+
| id | name |
+----+------+
| 46 |      |
+----+------+
1 row in set (0.00 sec)

mysql> select id,name from user where name like '%'  and name="";
+----+------+
| id | name |
+----+------+
| 46 |      |
+----+------+
1 row in set (0.00 sec)

mysql> 

控制查询结果显示行数limit（默认输出所有查询结果）

mysql> select  id,name,shell from user limit 10;

mysql> select  id,name,shell from user limit 9,6;



mysql> select name,shell from user where shell!="/bin/bash"
    -> limit 3;

mysql> select name,shell from user where shell!="/bin/bash"
    -> limit 3,3;

mysql> select name,shell from user where shell!="/bin/bash"
    -> limit 3,3;










